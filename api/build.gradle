plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.barbearia.maluca'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'org.postgresql:postgresql'
    implementation "org.flywaydb:flyway-core:10.12.0"
    implementation "org.flywaydb:flyway-database-postgresql:10.12.0"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
    useJUnitPlatform()
}

// Task de migração Flyway
tasks.register('generateFlywayMigrationFile') {
    description = 'Generate flyway migration'
    group = 'Flyway'

    doLast {
        def migrationsDir = file('src/main/resources/db/migration')
        if (!migrationsDir.exists()) {
            migrationsDir.mkdirs()
        }

        def migrationNameFromConsole = project.findProperty('migrationName')
        if (!migrationNameFromConsole) {
            throw new IllegalArgumentException("Você deve fornecer um nome para a migração usando o parâmetro -PmigrationName=<nome>.")
        }

        def timestamp = new Date().format("yyyyMMddHHmmss")
        def migrationName = "V${timestamp}__${migrationNameFromConsole}.sql"

        def migrationFile = file("${migrationsDir.path}/${migrationName}")
        migrationFile.write("-- ${migrationName} generated in ${migrationsDir.path}")

        logger.lifecycle("Migration file created: ${migrationFile.path}")
    }
}
